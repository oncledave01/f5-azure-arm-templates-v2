{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.4.0.0",
    "parameters": {
        "GW_Internal": {
            "allowedValues": [
                "Palo",
                "F5",
                "Forti",
                "AWS"
            ],
            "defaultValue": "Palo",
            "metadata": {
                "description": "Default Gateway on Internal subnet"
            },
            "type": "string"
        },
        "adminUsername": {
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin username applied to BIG-IP Virtual Machine."
            },
            "type": "string"
        },
        "adminPassword": {
            "defaultValue": "sports-lionize-DOCTRINE1",
            "metadata": {
                "description": "Admin password applied to BIG-IP Virtual Machine."
            },
            "type": "string"
        },
        "sshKey": {
            "metadata": {
                "description": "REQUIRED - Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
            },
            "type": "string"
        },
        "instanceName": {
            "defaultValue": "vm01",
            "metadata": {
                "description": "VM instance name."
            },
            "type": "string"
        },
        "instanceType": {
            "defaultValue": "Standard_DS3_v2",
            "metadata": {
                "description": "Enter valid instance type."
            },
            "type": "string"
        },
        "subnetId": {
            "metadata": {
                "description": "REQUIRED - Enter the subnet ID to use."
            },
            "type": "string"
        },
        "nsgId": {
            "defaultValue": "",
            "metadata": {
                "description": "Enter security group id to use. Use default if you do not wish to apply an NSG policy."
            },
            "type": "string"
        },
        "appContainerName": {
            "defaultValue": "owasp/security-shepherd:latest",
            "metadata": {
                "description": "The docker container to use when deploying the example application."
            },
            "type": "string"
        },
        "cloudInitUrl": {
            "defaultValue": "",
            "metadata": {
                "description": "URl to cloud-init file used for customizing VM."
            },
            "type": "string"
        },
        "tagValues": {
            "defaultValue": {
                "application": "APP",
                "cost": "COST",
                "environment": "ENV",
                "group": "GROUP",
                "owner": "OWNER"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        },
        "AppIP": {
            "defaultValue": "10.0.3.10",
            "metadata": {
                "description": "APP Private IP."
            },
            "type": "string"
        }
    },
    "variables": {
        "cloudInit": "[concat('#include\n',parameters('cloudInitUrl'))]",
        "commandToExecute": "[concat('sleep 60; apt-get update -y; apt-get -y install docker.io; docker run --name gruyere -p 80:8008 -p 443:443 -d ', parameters('appContainerName'), '; ip route replace default via ', variables('nextHopIpAddress'), ' src ', parameters('AppIP') ,' metric 100')]",
        "imageReference": {
            "offer": "0001-com-ubuntu-server-focal",
            "publisher": "Canonical",
            "sku": "20_04-lts",
            "version": "latest"
        },
        "nicName": "[concat(variables('vmName'), '-nic')]",
        "networkSecurityGroup": {
            "id": "[parameters('nsgId')]"
        },
        "storageAccountType": "Standard_LRS",
        "storageName": "[concat(uniqueString(resourceGroup().name, resourceGroup().id, deployment().name), 'data000')]",
        "vmName": "[concat(parameters('instanceName'), '-app-vm')]",
        "nextHopIpAddress": "[if(equals(parameters('GW_Internal'),'Palo'),'10.0.3.4',  if(equals(parameters('GW_Internal'),'F5'),'10.0.3.5',  if(equals(parameters('GW_Internal'),'Forti'),'10.0.3.6',  '10.0.3.1'  )  )  )]"
    },
    "resources": [
        {
            "apiVersion": "2021-04-01",
            "kind": "Storage",
            "location": "[resourceGroup().location]",
            "name": "[variables('storageName')]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "sku": {
                "name": "[variables('storageAccountType')]",
                "tier": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "2020-06-01",
            "location": "[resourceGroup().location]",
            "name": "[variables('nicName')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('vmName'), '-ipconfig1')]",
                        "properties": {
                            "privateIpAddress": "[parameters('AppIP')]",
                            "privateIpAllocationMethod": "Static",
                            "subnet": {
                                "id": "[parameters('subnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": "[if(empty(parameters('nsgId')), json('null'), variables('networkSecurityGroup'))]"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "2019-12-01",
            "dependsOn": [
                "[variables('nicName')]",
                "[variables('storageName')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[variables('vmName')]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('storageName'), '.blob.', environment().suffixes.storage)]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshKey')]",
                                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                                }
                            ]
                        }
                    },
                    "computerName": "[variables('vmName')]",
                    "customData": "[base64(variables('cloudInit'))]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "createOption": "fromImage",
                        "caching": "ReadWrite"
                    }
                }
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "2019-12-01",
            "condition": "[not(empty(parameters('appContainerName')))]",
            "dependsOn": [
                "[variables('vmName')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('vmName'),'/vmInit')]",
            "properties": {
                "autoUpgradeMinorVersion": false,
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "commandToExecute": "[variables('commandToExecute')]"
                },
                "type": "CustomScript",
                "typeHandlerVersion": "2.0"
            },
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ],
    "outputs": {
        "appIp": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nicName')),'2020-06-01').ipConfigurations[0].properties.privateIPAddress]"
        },
        "vmName": {
            "type": "string",
            "value": "[variables('vmName')]"
        }
    }
}

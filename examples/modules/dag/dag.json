{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.4.0.0",
    "parameters": {
        "uniqueString": {
            "metadata": {
                "description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
            },
            "type": "string"
        },
        "nsg0": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["22","8443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                },
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg1": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "nsg2": {
            "defaultValue": [
                {
                    "destinationPortRanges": ["80","443"],
                    "sourceAddressPrefix": "",
                    "protocol": "Tcp"
                }
            ],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
        "numberPublicExternalIpAddresses": {
            "defaultValue": 1,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "metadata": {
                "description": "Enter the number of public external ip address to create. At least one is required to build ELB."
            },
            "type": "int"
        },
        "numberPublicMgmtIpAddresses": {
            "defaultValue": 3,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "metadata": {
                "description": "Enter the number of public mgmt ip addresses to create."
            },
            "type": "int"
        },
        "tagValues": {
            "defaultValue": {
                "application": "APP",
                "cost": "COST",
                "environment": "ENV",
                "group": "GROUP",
                "owner": "OWNER"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        }
    },
    "variables": {
        "copy": [
            {
                "count": "[variables('nsg0Length')]",
                "input": {
                    "name": "[concat('nsg0_allow_', copyIndex('constructNsg0Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG0 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg0')[copyIndex('constructNsg0Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg0Array')))]",
                        "protocol": "[parameters('nsg0')[copyIndex('constructNsg0Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg0')[copyIndex('constructNsg0Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg0Array"
            },
            {
                "count": "[variables('nsg1Length')]",
                "input": {
                    "name": "[concat('nsg1_allow_', copyIndex('constructNsg1Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG1 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg1')[copyIndex('constructNsg1Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg1Array')))]",
                        "protocol": "[parameters('nsg1')[copyIndex('constructNsg1Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg1')[copyIndex('constructNsg1Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg1Array"
            },
            {
                "count": "[variables('nsg2Length')]",
                "input": {
                    "name": "[concat('nsg2_allow_', copyIndex('constructNsg2Array'))]",
                    "properties": {
                        "access": "Allow",
                        "description": "NSG2 Allow",
                        "destinationAddressPrefix": "*",
                        "destinationPortRanges": "[parameters('nsg2')[copyIndex('constructNsg2Array')].destinationPortRanges]",
                        "direction": "Inbound",
                        "priority": "[int(concat('10', copyIndex('constructNsg2Array')))]",
                        "protocol": "[parameters('nsg2')[copyIndex('constructNsg2Array')].protocol]",
                        "sourceAddressPrefix": "[parameters('nsg2')[copyIndex('constructNsg2Array')].sourceAddressPrefix]",
                        "sourcePortRange": "*"
                    }
                },
                "name": "constructNsg2Array"
            }
        ],
        "uniqueString": "[toLower(parameters('uniqueString'))]",
        "emptyArray": [],
        "nsg0Array": "[variables('constructNsg0Array')]",
        "nsg0Id": "[if(greater(variables('nsg0Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name'))), variables('emptyArray'))]",
        "nsg0Length": "[length(parameters('nsg0'))]",
        "nsg0Name": "[concat(variables('uniqueString'), '-nsg0')]",
        "nsg1Array": "[variables('constructNsg1Array')]",
        "nsg1Id": "[if(greater(variables('nsg1Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name'))), variables('emptyArray'))]",
        "nsg1Length": "[length(parameters('nsg1'))]",
        "nsg1Name": "[concat(variables('uniqueString'), '-nsg1')]",
        "nsg2Array": "[variables('constructNsg2Array')]",
        "nsg2Id": "[if(greater(variables('nsg2Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg2Name'))), variables('emptyArray'))]",
        "nsg2Length": "[length(parameters('nsg2'))]",
        "nsg2Name": "[concat(variables('uniqueString'), '-nsg2')]"
        "outboundNsgRule": [
            {
                "name": "allow_loadBalancer_traffic",
                "properties": {
                    "access": "Allow",
                    "description": "Outbound traffic through load balancer",
                    "destinationAddressPrefix": "AzureLoadBalancer",
                    "destinationPortRange": "*",
                    "direction": "Outbound",
                    "priority": 200,
                    "protocol": "Tcp",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*"
                }
            }
        ],
        "outboundRuleConfigArray": [
            {
                "name": "outboundRuleForInit",
                "properties": {
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('externalLoadBalancerName'), 'loadBalancerMgmtBackEnd')]"
                    },
                    "frontendIPConfigurations": [
                        {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('externalLoadBalancerName'), 'loadBalancerMgmtFrontEnd')]"
                        }
                    ],
                    "protocol": "All"
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg0Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg0Array')]"
            },
            "condition": "[not(empty(parameters('nsg0')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg1Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg1Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg1')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('nsg2Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg2Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg2')))]"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "name": "mgmtpipcopy"
            },
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('uniqueString'), '-mgmt-pip', copyIndex())]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('uniqueString'), '-mgmt', copyIndex(0))]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "2020-06-01",
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "name": "apppipcopy"
            },
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('uniqueString'), '-app-pip', copyIndex())]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('uniqueString'), '-app', copyIndex(0))]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
    ],
    "outputs": {
        "externalIpIds": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))]"
            },
            "type": "array"
        },
        "externalIps": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIpAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))).ipAddress]"
            },
            "type": "array"
        },
        "externalIpDns": {
            "condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicExternalIPAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))).dnsSettings.fqdn]"
            },
            "type": "array"
        },
        "mgmtIpIds": {
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip', copyIndex()))]"
            },
            "type": "array"
        },
        "mgmtIps": {
            "condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
            "copy": {
                "count": "[parameters('numberPublicMgmtIpAddresses')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip', copyIndex()))).ipAddress]"
            },
            "type": "array"
        },
        "nsg0Id": {
            "condition": "[not(empty(parameters('nsg0')))]",
            "type": "string",
            "value": "[variables('nsg0Id')[0]]"
        },
        "nsg1Id": {
            "condition": "[not(empty(parameters('nsg1')))]",
            "type": "string",
            "value": "[variables('nsg1Id')[0]]"
        },
        "nsg2Id": {
            "condition": "[not(empty(parameters('nsg2')))]",
            "type": "string",
            "value": "[variables('nsg2Id')[0]]"
        },
        "nsgIds": {
            "value": "[union(variables('nsg0Id'), variables('nsg1Id'), variables('nsg2Id'))]",
            "type": "array"
        }
    }
}
